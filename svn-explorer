#!/usr/bin/env ruby
# frozen_string_literal: true

# svn-explorer, The SVN repository explorer
# Copyright (C) 2017  Hyeon Kim
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'readline'

#
# Constants
#
SEPARATOR = '/'
REPO_URL = begin
  # Read command line arguments
  arg = ARGV[0]
  if arg.nil?
    STDERR.puts("usage: #{$PROGRAM_NAME} <repository>")
    exit(1)
  end

  # Handle trailing slashes
  if arg[-1] != SEPARATOR
    arg + SEPARATOR
  else
    arg.sub(/(#{Regexp.escape(SEPARATOR)})+$/, SEPARATOR)
  end
end

#
# Utility functions
#
def resolve(path_stack, path)
  # TODO: 루트경로, 혹은 홈 디렉토리 인식하기
  return path.split(SEPARATOR).reduce(path_stack) do |path_stack, dirname|
    case dirname
    when '', '.'; path_stack
    when '..'; path_stack[0...-1]
    else; path_stack + [dirname]
    end
  end
end

def url(buffer)
  return REPO_URL + buffer.map { |path| path + SEPARATOR } .join()
end

def option()
  return (
    '--non-interactive ' +
    '--no-auth-cache ' +
    '--username <USERNAME> ' +
    '--password <PASSWORD>'
  )
end

def error(msg)
  STDERR.puts("#{$PROGRAM_NAME}: #{msg}")
end

#
# Main logic
#
def read(path_stack)
  loop do
    begin
      line = Readline.readline("#{url(path_stack)}$ ", true)
      STDERR.puts if line.nil?
      return line
    rescue Interrupt
      STDERR.puts('^C')
    end
  end
end

def parse(line)
  # TODO: 제대로 파싱하기
  return line.split
end

class EvaluateResult
  def initialize(path_stack, cmd = nil)
    @path_stack = path_stack
    @cmd = cmd
  end

  def path_stack; return @path_stack; end
  def cmd; return @cmd; end
end
def evaluate(path_stack, program, arguments)
  case program

  # List
  when 'll', 'l'
    # TODO: 좀더 추가적인 정보를 주도록 설정
    system("svn ls #{option()} '#{url(arguments[0].nil? ? path_stack : resolve(path_stack, arguments[0]))}'")
    return EvaluateResult.new(path_stack)
  when 'ls'
    system("svn ls #{option()} '#{url(arguments[0].nil? ? path_stack : resolve(path_stack, arguments[0]))}' | column")
    return EvaluateResult.new(path_stack)

  # Change directory
  when 'cd'
    # 인자가 없을경우 루트 디렉토리로 감
    if arguments[0].nil?
      return EvaluateResult.new([])
    end

    new_path_stack = resolve(path_stack, arguments[0])

    output = `svn info #{option()} '#{url(new_path_stack)}' 2>/dev/null`
    # 경로에 파일이 존재하는지 검사
    if not $?.success?
      error("The directory '#{arguments[0]}' does not exist")
      return EvaluateResult.new(path_stack)
    end
    # 해당 파일이 디렉토리가 맞는지 검사
    if output.match(/^Node Kind: (.*)$/)&.captures&.dig(0) != 'directory'
      error("not a directory: #{arguments[0]}")
      return EvaluateResult.new(path_stack)
    end

    return EvaluateResult.new(new_path_stack)
  when /^\.+$/
    count = program.length - 1
    return EvaluateResult.new(path_stack[0...-count])

  # Exit commands
  when 'exit', 'quit'
    return EvaluateResult.new(path_stack, :exit)

  # Command not found
  else
    error("command not found: #{program}")
    return EvaluateResult.new(path_stack)
  end
end

path_stack = []
Readline.completion_append_character = ''
Readline.completion_proc = -> argument {
  path, sep, query = argument.rpartition(SEPARATOR)
  return `svn ls #{option()} '#{url(resolve(path_stack, path+sep))}'`
    .lines
    .map(&:chomp)
    .grep(/^#{Regexp.escape(query)}.*\/$/)
    .map { |x| path + sep + x }
}
while line = read(path_stack)
  tokens = parse(line)
  next if tokens.empty?

  result = evaluate(path_stack, tokens[0], tokens[1..-1])

  path_stack = result.path_stack
  break if result.cmd == :exit
end
